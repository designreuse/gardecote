/*
 * Created on 27 sept. 2016 ( Time 21:28:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.gardecote.controllers;
import com.gardecote.business.service.*;
import com.gardecote.entities.*;

import com.gardecote.web.frmSearchPgsForDocCrea;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.ui.Model;

import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.xml.ws.Response;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.beans.factory.annotation.Autowired;
import com.gardecote.LicenceAc;


/**
 * Spring MVC controller for 'LicencesBatlast' management.
 */
@RestController

public class mainJsp  {
	@Autowired
	private qPrefixService prefixService;

	@Autowired
	private qEspeceService espService;

	@Autowired
	private qCarnetService carnetService;
	@Autowired
	private qConcessionService concessionService;
	@Autowired
	private qConsignataireService consignataireService;
	@Autowired
	private qEnginsLicenceService enginsLicenceService;
	@Autowired
	private qEnginPecheMarService enginsPechMarService;
	@Autowired
	private qEnginPecheDebarService enginsPecheDebarService;

	@Autowired
	private qEspeceService especesService;
	@Autowired
	private qJourMereService jourMereService;
	@Autowired
	private qLicenceService licenceService;
	@Autowired
	private qModelJPService modeljpService;
	@Autowired
	private qPageCarnetService pagecarnetService;

	@Autowired
	private qTypeConcessionService typeconcessionService;
	@Autowired
	private qZoneService zoneService;

	@Autowired
	private qCategRessourceService categService;
	@Autowired
	private qDocService docService;
	@Autowired
	private qEspeceTypeeService especetypeeService;
	@Autowired
	private qEspeceService especeService;
	@Autowired
	private qJourDebService   jourdebService;
	@Autowired
	private qNationService  nationService;

	@Autowired
	private qRegistreNavireService registrenavireService;
	@Autowired
	private qSeqService seqService;
	@Autowired
	private qTypeLicService typelicService;
	@Autowired
	private qTypeNavService typenavService;

	@Autowired
	private LicenceAc ourLic;
    @RequestMapping(value = "/autocomnomnav",method = RequestMethod.GET)
	public @ResponseBody List<String> getCountryList(@RequestParam("term") String term) {
		List<String> numpages=new ArrayList<>();
		Page<qBateau> pq=registrenavireService.getSuggNavire(term);
		for(qBateau q:pq) {numpages.add(q.getNomnav().toString());
			System.out.println(q.getNomnav().toString());}
	    	return numpages;
	}

	@RequestMapping(value = "/autocomNomEspece",method = RequestMethod.GET)
	public @ResponseBody List<qEspece> getEspeceList(@RequestParam("esp") String esp) {
		System.out.println(esp);
		List<qEspece> numpages=new ArrayList<>();
		Page<qEspece> pq=espService.getSuggEsp(esp);
		for(qEspece espp:pq) {
			numpages.add(espp);
		//	System.out.println(espp.getNomFr().toString());
		                     }
		return numpages;
	}

	@RequestMapping(value = "/findEspCode",method = RequestMethod.GET)
	public @ResponseBody String findEspCode(@RequestParam("esp") String esp) {
		System.out.println(esp);

		qEspece pq=espService.getSuggEspExact(esp);

		return pq.getCodeEsp();
	}
	@RequestMapping(value="/autocomPagesG",method = RequestMethod.GET)
	public List<String> getAutocompletePagesP(@RequestParam("numeroP") String numeroD) {

		System.out.println("numero de page : "+numeroD);
		List<String> numpages=new ArrayList<>();
		Page<qPageCarnet> pq=pagecarnetService.getSuggPageP(numeroD);
		for(qPageCarnet q:pq) {numpages.add(q.getNumeroPage().toString());System.out.println(q.getNumeroPage().toString());}
		return numpages;
	}
	@RequestMapping(value="/autocomPages",method = RequestMethod.GET)
	public List<String> getAutocompletePages(@RequestParam("numeroD") String numeroD,@RequestParam("typeDoc") String typeDoc) {

		System.out.println("numero de page : "+numeroD);
		List<String> numpages=new ArrayList<>();
		Page<qPageCarnet> pq=pagecarnetService.getSuggPage(numeroD,enumTypeDoc.valueOf(typeDoc));
		for(qPageCarnet q:pq) {numpages.add(q.getNumeroPage().toString());System.out.println(q.getNumeroPage().toString());}

		return numpages;
	}

	@RequestMapping(value="/autocomPagesAnnexe",method = RequestMethod.GET)
	public List<String> getAutocompletePagesAnnexe(@RequestParam("numeroD") String numeroD,@RequestParam("typeDoc") String typeDoc) {

		System.out.println("numero de page : "+numeroD);
		List<String> numpages=new ArrayList<>();
		Page<qPageCarnet> pq=pagecarnetService.getSuggPageAnnexe(numeroD,enumTypeDoc.Journal_Annexe);
		for(qPageCarnet q:pq) { numpages.add(q.getNumeroPage().toString().replaceFirst(q.getQcarnet().getPrefixNumerotation(),""));System.out.println(q.getNumeroPage().toString());}

		return numpages;
	}

	@RequestMapping(value="/autocomConcession",method = RequestMethod.GET)
	public List<String> getAutocompleteConcession(@RequestParam("term") String searchconcession) {
		System.out.println("numero de concession : "+searchconcession);
		List<String> numconcession=new ArrayList<>();
		Page<qConcession> pq=concessionService.getSuggConcession(searchconcession);
		for(qConcession q:pq) {numconcession.add(q.getRefConcession().toString());}
		//+"-"+q.getQconsignataire().getNomconsignataire().toString()

		return numconcession;
	}

	@RequestMapping(value="/generate",method = RequestMethod.GET)
	public void generatecontent() {



		//  creer le consignataires

//		qConsignataire qconsignataire1 = new qConsignataire("Jelal eddine");
//		qConsignataire qconsignataire2 = new qConsignataire("Jelal eddine 3");
//		qConsignataire qconsignataire3 = new qConsignataire("Jelal eddine 2 ");
//		consignataireService.create(qconsignataire1);
	//	consignataireService.create(qconsignataire2);
	//	consignataireService.create(qconsignataire3);
		//creer les engins de peches


		// creer la concession


		//	SimpleDateFormat sdfmt1 = new SimpleDateFormat("dd/MM/yy");
		// //  SimpleDateFormat sdfmt2= new SimpleDateFormat("dd-MMM-yyyy");
		//	Date dateLicence = null, datedebut = null, dateFin = null;

		//	try {
		//		dateLicence = sdfmt1.parse("12/12/2016");
		//		datedebut = sdfmt1.parse("12/12/2016");
		//		dateFin = sdfmt1.parse("12/12/2016");
		//	} catch (ParseException e) {
		//		e.printStackTrace();
		//	}
		// qConcessionPC.setCategoriesRessources(qcatList1);
		//	qConcession qConcessionPC = new qConcession("PC2016/0001", qconsignataire3, dateLicence, datedebut, dateFin, qc, null);


		//	System.out.println("id est :" + q1.getIdtypeConcession());
		//	qConcessionPC.setCategoriesRessources(qc);


//		concessionService.create(qConcessionPC);

// c est une concession de type cotiere non pontee

		//	concessionService.create(qConcessionPC);
		// creer une licence bat last





	//	qNavire qreg1 = new qNavire("NUMIMM1", "BATEAU 1", "ARMATEUR", "33", "67", qnation4, "56", "67", "45", "56", 1977, "3ER", 45, 56, 89, 56, "NDB", "Radio", "BALISE1");
	//	registrenavireService.create(qreg1);
	//	qNavire qreg2 = new qNavire("NUMIMM2", "BATEAU 1", "ARMATEUR", "33", "67", qnation4, "56", "67", "45", "56", 1977, "3ER", 45, 56, 89, 56, "NDB", "Radio", "BALISE1");
	//	registrenavireService.create(qreg2);

		//   SimpleDateFormat sdfmt2= new SimpleDateFormat("dd-MMM-yyyy");
	//	System.out.println("jhjg :");
		//	System.out.println(nav.getNumimm());
	//	Date dateLicenceDebut = null, dateLicenceFin = null;

	//	try {
	//		dateLicenceDebut = sdfmt1.parse("01/01/2016");
	//		dateLicenceFin = sdfmt1.parse("10/05/2017");
		//} catch (ParseException e) {
		//	e.printStackTrace();
		//}
		// save one side with null value for other many side

//		qLicenceNational qlicencebatlast1 = new qLicenceNational(qtyplic20, qZone7, qnation3, qc, qreg1, enumTypeBat.GLACIER, dateLicenceDebut, dateLicenceFin, "LIC20171", qConcessionPC);

//			licenceService.create(qlicencebatlast1);





//		qLicenceNational qlicencebatlast2=new qLicenceNational(qtyplic20,qZone7,qnation3,qc,qreg1,enumTypeBat.GLACIER,dateLicenceDebut,dateLicenceFin,"LIC20171",qConcessionPC);

//		licenceService.create(qlicencebatlast2);


//		qlicencebatlast2.setQcatressources(qc);


		//    Iterator<qCategRessource> crunchifyIterator = qc2.iterator();


//		registrenavireService.save(qreg1);
//		licenceService.save(qlicencebatlast2);
//		Iterator<qLic> qlicencesIterator= licenceService.findAll(0,20).iterator();
//	    Integer i=0;
//		while(qlicencesIterator.hasNext())
//		{
//			Integer sz=qlicencesIterator.next().getQcatressources().size();
//
//			System.out.println(" nombre de categ de "+i+" EST :"+sz);
//			i++;
//		}
//        q2.setQlicence(qlicencebatlast2);
		// qcategressourcerepository.save(q2);
		// crer les modeles et les associer avec  les especes
		//qPrefix prefixPA ,prefixPC,prefixPE,prefixDEM,qPrefix prefixCRUST qPrefix prefixCEPH 	qPrefix prefixTR

	//	qModelJP qmodelPA=new qModelJP(prefixPA,null);
	//	qModelJP qmodelPC=new qModelJP(prefixPC,null);
	//	qModelJP qmodelJPPE=new qModelJP(prefixPE,null);
	//	qModelJP qmodelJPDEM=new qModelJP(prefixDEM,null);
//		qModelJP qmodelJPCRUS=new qModelJP(prefixCRUST,null);
//		qModelJP qmodelJPCEPH=new qModelJP(prefixCEPH,null);


		// creer les especes

//		qEspece qespeceArts1=new qEspece("ESP1001","الفئة الاولى","premiere espece",1);
//		qEspece qespeceArts2=new qEspece("ESP1002","الفئة الاولى","deuxieme espece",2);
//		qEspece qespeceArts3=new qEspece("ESP1003","الفئة الاولى","troisieme espece",3);

//		especeService.create(qespeceArts1);
//		especeService.create(qespeceArts2);
//		especeService.create(qespeceArts3);

//		modeljpService.create(qmodelPA);
//		modeljpService.create(qmodelPC);
//		modeljpService.create(qmodelJPCEPH);
//		modeljpService.create(qmodelJPPE);
//		modeljpService.create(qmodelJPCRUS);
//		modeljpService.create(qmodelJPDEM);

// les especes typees

//		List<qEspeceTypee> esptypessCollection=new ArrayList<qEspeceTypee>();

//		qEspeceTypee qespecetypee1=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts1,null);
//		qEspeceTypee qespecetypee2=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts2,null);
//		qEspeceTypee qespecetypee3=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts3,null);
//		esptypessCollection.add(qespecetypee1);
//		esptypessCollection.add(qespecetypee2);
//		esptypessCollection.add(qespecetypee3);
//		qmodelPA.setEspecestypees(esptypessCollection);
//		modeljpService.create(qmodelPA);

		// creer les carnet et les pages automatiques
		// creation d'une fiche de debarquement

		// simulation de saisie d'un fiche de debarquement PC Non Pontee n de page = pc7
	//	SimpleDateFormat sdfmt = new SimpleDateFormat("dd/MM/yy");
	//	Date dateDepart=null, dateRetour=null;
	//	try {
	//		dateDepart = sdfmt1.parse("03/05/2016");
	//		dateRetour = sdfmt1.parse("04/06/2016");
	//	} catch (ParseException e) {
	//		e.printStackTrace();
	//	}
	//	qSeq seqActive=new qSeq("PC7","PC12",null);

//		seqService.create(seqActive);

	//	qCarnet qcarnet=new qCarnet(prefixPA,1L,50,null,null);

	//	qCarnet crn=carnetService.entrerDansLeSystem(qcarnet);
	//	System.out.println(crn);
	//	List<qLic> qlics=registrenavireService.retActLicences(qreg1);
	//	qLic licenceChoisie=qlics.get(0);
	//	carnetService.attribuerCarnetAuNavire(crn,qreg1,licenceChoisie,null);
	}
	@RequestMapping(value="/finListP",method = RequestMethod.GET)
	public List<String> getFinList(@RequestParam String debut,@RequestParam String typeDoc) {
		// creer les categories de ressource 5 PA  de 1 a 5
		System.out.println("numero de page  : "+debut);
		List<String> numsfin=new ArrayList<>();
		List<qPageCarnet> pq=pagecarnetService.getFinList(debut,enumTypeDoc.valueOf(typeDoc));
		for(qPageCarnet q:pq) numsfin.add(q.getNumeroPage().toString());
		return numsfin;
	}


	@Secured(value={"ROLE_admin"})
	@RequestMapping("/start1")
	public String list(Model model,HttpServletRequest httpServletRequest) {
		HttpSession httpSession=httpServletRequest.getSession();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		String username = auth.getName();
		List<String> roles=new ArrayList<>();
		for(GrantedAuthority ga:auth.getAuthorities()){
			roles.add(ga.getAuthority());
		}

		Map<String,Object> params=new HashMap<>();
		params.put("username",username);
		params.put("roles",roles);
	//	params.put("exp",ourLic.getLicAc().getLicenseText().getLicenseExpireDate().toString());
	//	ourLic.getLicAc().getValidationStatus().toString()
	//	params.put("validationStatus",true);
    //  params.put("Lic",ourLic.getLicAc());
		System.out.println("rest :");
	//	System.out.println(ourLic.getLicAc().getLicenseText().getLicenseExpireDate());

		model.addAttribute("infos",params);
		System.out.println(params);


		return "index";
	}

	

}