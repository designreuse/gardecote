/*
 * Created on 27 sept. 2016 ( Time 21:28:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.gardecote.controllers;
import com.gardecote.data.repository.jpa.*;
import com.gardecote.entities.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.beans.factory.annotation.Autowired;
import com.gardecote.LicenceAc;
import com.gardecote.business.service.qCarnetService;
import com.gardecote.business.service.qConcessionService;
import com.gardecote.business.service.qConsignataireService;
import com.gardecote.business.service.qEnginPecheService;
import com.gardecote.business.service.qEspeceService;
import com.gardecote.business.service.qJourMereService;
import com.gardecote.business.service.qZoneService;
import com.gardecote.business.service.qLicenceService;
import com.gardecote.business.service.qModelJPService;
import com.gardecote.business.service.qPageCarnetService		;
import com.gardecote.business.service.qTypeConcessionService;
import com.gardecote.business.service.qCategRessourceService;
import com.gardecote.business.service.qDocService;
import com.gardecote.business.service.qEspeceTypeeService;
import com.gardecote.business.service.qJourDebService;
import com.gardecote.business.service.qNationService;
import com.gardecote.business.service.qRegistreNavireService;
import com.gardecote.business.service.qSeqService;
import com.gardecote.business.service.qTypeLicService;
import com.gardecote.business.service.qTypeNavService;

/**
 * Spring MVC controller for 'LicencesBatlast' management.
 */
@RestController

public class mainJsp  {

	@Autowired
	private qCarnetService carnetService;
	@Autowired
	private qConcessionService concessionService;
	@Autowired
	private qConsignataireService consignataireService;
	@Autowired
	private qEnginPecheService enginsPecheService;

	@Autowired
	private qEspeceService especesService;
	@Autowired
	private qJourMereService jourMereService;
	@Autowired
	private qLicenceService licenceService;
	@Autowired
	private qModelJPService modeljpService;
	@Autowired
	private qPageCarnetService pagecarnetService;

	@Autowired
	private qTypeConcessionService typeconcessionService;
	@Autowired
	private qZoneService zoneService;

	@Autowired
	private qCategRessourceService categService;
	@Autowired
	private qDocService docService;
	@Autowired
	private qEspeceTypeeService especetypeeService;
	@Autowired
	private qEspeceService especeService;
	@Autowired
	private qJourDebService   jourdebService;
	@Autowired
	private qNationService  nationService;

	@Autowired
	private qRegistreNavireService registrenavireService;
	@Autowired
	private qSeqService seqService;
	@Autowired
	private qTypeLicService typelicService;
	@Autowired
	private qTypeNavService typenavService;

	@Autowired
	private LicenceAc ourLic;

	@RequestMapping(value="/autocomPages",method = RequestMethod.GET)
	public List<String> getAutocompletePages(@RequestParam String searchpage) {
		System.out.println("numero de page : "+searchpage);
		List<String> numpages=new ArrayList<>();
		Page<qPageCarnet> pq=pagecarnetService.getSuggPage(searchpage);
		for(qPageCarnet q:pq) {numpages.add(q.getNumeroPage().toString());System.out.println(q.getNumeroPage().toString());}

		return numpages;
	}
	@RequestMapping(value="/generate",method = RequestMethod.GET)
	public void generatecontent(){
		qTypeConcession paCeph = new qTypeConcessionArtisanal(1,enumPrefix.PA,enumTypeConcessionArtisanal.Cephalopode);
		qTypeConcession paCrust = new qTypeConcessionArtisanal(2,enumPrefix.PA,enumTypeConcessionArtisanal.Crustaces);
		qTypeConcession paDem = new qTypeConcessionArtisanal(3,enumPrefix.PA,enumTypeConcessionArtisanal.Poissons_demersaux);
		qTypeConcession paPel = new qTypeConcessionArtisanal(4,enumPrefix.PA,enumTypeConcessionArtisanal.Poissons_Pelagique);
		qTypeConcession paAlAut = new qTypeConcessionArtisanal(5,enumPrefix.PA,enumTypeConcessionArtisanal.Algues_et_autres_Mollusques);

		qEnginPeche qEng1 = new qEnginPeche(enumEngin.Casier, 70);
		qEnginPeche qEng2 = new qEnginPeche(enumEngin.Chalut, 30);
		List<qEnginPeche> qEngins = new ArrayList<qEnginPeche>();
		qEngins.add(qEng1);
		qEngins.add(qEng2);

		enginsPecheService.create(qEng1);
		enginsPecheService.create(qEng2);

		typeconcessionService.create(paCeph);
		typeconcessionService.create(paCrust);
		typeconcessionService.create(paDem);
		typeconcessionService.create(paPel);
		typeconcessionService.create(paAlAut);

		qCategRessource qPACep = new qCategRessource(typeconcessionService.findById(1), enumSupport.Collectif,null, qEngins);

		qCategRessource qPACrust = new qCategRessource(paCrust, enumSupport.Collectif,null, qEngins);

		qCategRessource qPADem = new qCategRessource(paDem, enumSupport.Collectif,null, qEngins);

		qCategRessource qPAPel = new qCategRessource(paPel, enumSupport.Collectif,null, qEngins);

		qCategRessource qPAAlAut = new qCategRessource(paAlAut, enumSupport.Collectif,null, qEngins);


		categService.create(qPACep);
		categService.create(qPACrust);
		categService.create(qPADem);
		categService.create(qPAPel);
		categService.create(qPAAlAut);
		//-------------------------------------------------------------------------------------------
		// creer les categories de ressource 10 PC de 6 a 12
		qTypeConcessionCotiere pcNPCeph = new qTypeConcessionCotiere(6,enumPrefix.CEPH,enumTypeConcessionCotiere.Cepholopode, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPCrust = new qTypeConcessionCotiere(7,enumPrefix.CRUS,enumTypeConcessionCotiere.Crustaces, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPDem = new qTypeConcessionCotiere(8,enumPrefix.DEM,enumTypeConcessionCotiere.Poissons_demersaux, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPPelSenneursM26 = new qTypeConcessionCotiere(9,enumPrefix.PE,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg1, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPPelSenneurs26A40 = new qTypeConcessionCotiere(10,enumPrefix.PE,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg2, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPPelSenneurs40A60 = new qTypeConcessionCotiere(11,enumPrefix.PE,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg3, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPAutreMol = new qTypeConcessionCotiere(12,enumPrefix.IND,enumTypeConcessionCotiere.Autres_Mollusques, enumTypePechCotiere.NON_PONTEE);
		typeconcessionService.create(pcNPCeph);
		typeconcessionService.create(pcNPCrust);
		typeconcessionService.create(pcNPDem);
		typeconcessionService.create(pcNPPelSenneursM26);
		typeconcessionService.create(pcNPPelSenneurs26A40);
		typeconcessionService.create(pcNPPelSenneurs40A60);
		typeconcessionService.create(pcNPAutreMol);

		qCategRessource qPCNPCep = new qCategRessource(pcNPCeph, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPCrust = new qCategRessource(pcNPCrust, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPDem = new qCategRessource(pcNPDem, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPPel1 = new qCategRessource(pcNPPelSenneursM26, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPPel2 = new qCategRessource(pcNPPelSenneurs26A40, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPPel3 = new qCategRessource(pcNPPelSenneurs40A60, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPAlAut = new qCategRessource(pcNPAutreMol, enumSupport.Collectif,null, qEngins);


		categService.create(qPCNPCep);
		categService.create(qPCNPCrust);
		categService.create(qPCNPDem);
		categService.create(qPCNPPel1);
		categService.create(qPCNPPel2);
		categService.create(qPCNPPel3);
		categService.create(qPCNPAlAut);

		// peche cotier pontee 13 a 19

		qTypeConcessionCotiere pcPCeph = new qTypeConcessionCotiere(13,enumPrefix.PC,enumTypeConcessionCotiere.Cepholopode, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPCrust = new qTypeConcessionCotiere(14,enumPrefix.PC,enumTypeConcessionCotiere.Crustaces, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPDem = new qTypeConcessionCotiere(15,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_demersaux, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPPelSenneursM26 = new qTypeConcessionCotiere(16,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg1, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPPelSenneurs26A40 = new qTypeConcessionCotiere(17,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg2, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPPelSenneurs40A60 = new qTypeConcessionCotiere(18,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg3, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPAutreMol = new qTypeConcessionCotiere(19,enumPrefix.PC,enumTypeConcessionCotiere.Autres_Mollusques, enumTypePechCotiere.NON_PONTEE);

		typeconcessionService.create(pcPCeph);
		typeconcessionService.create(pcPCrust);
		typeconcessionService.create(pcPDem);
		typeconcessionService.create(pcPPelSenneursM26);
		typeconcessionService.create(pcPPelSenneurs26A40);
		typeconcessionService.create(pcPPelSenneurs40A60);
		typeconcessionService.create(pcPAutreMol);


		qCategRessource qPCPCep = new qCategRessource(pcPCeph, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPCrust = new qCategRessource(pcPCrust, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPDem = new qCategRessource(pcPDem, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPPel1 = new qCategRessource(pcPPelSenneursM26, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPPel2 = new qCategRessource(pcPPelSenneurs26A40, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPPel3 = new qCategRessource(pcPPelSenneurs40A60, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPAlAut = new qCategRessource(pcPAutreMol, enumSupport.Collectif,null, qEngins);

		categService.create(qPCPCep);
		categService.create(qPCPCrust);
		categService.create(qPCPDem);
		categService.create(qPCPPel1);
		categService.create(qPCPPel2);
		categService.create(qPCPPel3);
		categService.create(qPCPAlAut);

		// creer les categories de ressource 9 PH de 19 a  27
		qTypeConcessionHautiriere phNCeph = new qTypeConcessionHautiriere(20,enumPrefix.CEPH,enumTypeConcessionHautiriere.Cephalopode, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNAutres = new qTypeConcessionHautiriere(21,enumPrefix.IND,enumTypeConcessionHautiriere.Autres_Mollusques, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNCrab = new qTypeConcessionHautiriere(22,enumPrefix.IND,enumTypeConcessionHautiriere.Crabe_profond, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNCrv = new qTypeConcessionHautiriere(23,enumPrefix.IND,enumTypeConcessionHautiriere.Crevettes, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNLangRose = new qTypeConcessionHautiriere(24,enumPrefix.IND,enumTypeConcessionHautiriere.Langouste_rose, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNMerlu = new qTypeConcessionHautiriere(25,enumPrefix.IND,enumTypeConcessionHautiriere.Merlus, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNPel = new qTypeConcessionHautiriere(26,enumPrefix.PE,enumTypeConcessionHautiriere.Pelagique, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNDemAQM = new qTypeConcessionHautiriere(27,enumPrefix.DEM,enumTypeConcessionHautiriere.Poissons_demersaux_autre_que_merlu, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNThon = new qTypeConcessionHautiriere(28,enumPrefix.IND,enumTypeConcessionHautiriere.Thons, enumTypePecheHautiriere.National);

		typeconcessionService.create(phNCeph);
		typeconcessionService.create(phNAutres);
		typeconcessionService.create(phNCrab);
		typeconcessionService.create(phNCrv);
		typeconcessionService.create(phNLangRose);
		typeconcessionService.create(phNMerlu);
		typeconcessionService.create(phNPel);
		typeconcessionService.create(phNDemAQM);
		typeconcessionService.create(phNThon);


		qCategRessource qRCphNCeph = new qCategRessource(phNCeph, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNAutres = new qCategRessource(phNAutres, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNCrab = new qCategRessource(phNCrab, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNCrv = new qCategRessource(phNCrv, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNLangRose = new qCategRessource(phNMerlu, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNMerlu = new qCategRessource(phNPel, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNPel = new qCategRessource(phNDemAQM, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNDemAQM = new qCategRessource(phNThon, enumSupport.Individuel,null, qEngins);
		categService.create(qRCphNCeph);
		categService.create(qRCphNAutres);
		categService.create(qRCphNCrab);
		categService.create(qRCphNCrv);
		categService.create(qRCphNLangRose);
		categService.create(qRCphNMerlu);
		categService.create(qRCphNPel);
		categService.create(qRCphNDemAQM);


		qTypeConcessionHautiriere phACeph = new qTypeConcessionHautiriere(29,enumPrefix.CEPH,enumTypeConcessionHautiriere.Cephalopode, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAAutres = new qTypeConcessionHautiriere(30,enumPrefix.IND,enumTypeConcessionHautiriere.Autres_Mollusques, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phACrab = new qTypeConcessionHautiriere(31,enumPrefix.IND,enumTypeConcessionHautiriere.Crabe_profond, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phACrv = new qTypeConcessionHautiriere(32,enumPrefix.IND,enumTypeConcessionHautiriere.Crevettes, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phALangRose = new qTypeConcessionHautiriere(33,enumPrefix.IND,enumTypeConcessionHautiriere.Langouste_rose, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAMerlu = new qTypeConcessionHautiriere(34,enumPrefix.IND,enumTypeConcessionHautiriere.Merlus, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAPel = new qTypeConcessionHautiriere(35,enumPrefix.IND,enumTypeConcessionHautiriere.Pelagique, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phADemAQM = new qTypeConcessionHautiriere(36,enumPrefix.DEM,enumTypeConcessionHautiriere.Poissons_demersaux_autre_que_merlu, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAThon = new qTypeConcessionHautiriere(37,enumPrefix.IND,enumTypeConcessionHautiriere.Thons, enumTypePecheHautiriere.Affraite);

		typeconcessionService.create(phACeph);
		typeconcessionService.create(phAAutres);
		typeconcessionService.create(phACrab);
		typeconcessionService.create(phACrv);
		typeconcessionService.create(phALangRose);
		typeconcessionService.create(phAMerlu);
		typeconcessionService.create(phAPel);
		typeconcessionService.create(phADemAQM);
		typeconcessionService.create(phAThon);

		qCategRessource qRCphACeph = new qCategRessource(phACeph, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAAutres = new qCategRessource(phAAutres, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphACrab = new qCategRessource(phACrab, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphACrv = new qCategRessource(phACrv, enumSupport.Individuel,null, qEngins);
		qCategRessource qphALangRose = new qCategRessource(phALangRose, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAMerlu = new qCategRessource(phAMerlu, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAPel = new qCategRessource(phAPel, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphADemAQM = new qCategRessource(phADemAQM, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAThon = new qCategRessource(phAThon, enumSupport.Individuel,null, qEngins);


		categService.create(qRCphACeph);
		categService.create(qRCphAAutres);
		categService.create(qRCphACrab);
		categService.create(qRCphACrv);
		categService.create(qphALangRose);
		categService.create(qRCphAMerlu);
		categService.create(qRCphAPel);
		categService.create(qRCphADemAQM);
		categService.create(qRCphAThon);

		qTypeConcessionHautiriere phLCeph = new qTypeConcessionHautiriere(38,enumPrefix.CEPH,enumTypeConcessionHautiriere.Cephalopode, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLAutres = new qTypeConcessionHautiriere(39,enumPrefix.IND,enumTypeConcessionHautiriere.Autres_Mollusques, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLCrab = new qTypeConcessionHautiriere(40,enumPrefix.IND,enumTypeConcessionHautiriere.Crabe_profond, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLCrv = new qTypeConcessionHautiriere(41,enumPrefix.IND,enumTypeConcessionHautiriere.Crevettes, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLLangRose = new qTypeConcessionHautiriere(42,enumPrefix.IND,enumTypeConcessionHautiriere.Langouste_rose, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLMerlu = new qTypeConcessionHautiriere(43,enumPrefix.IND,enumTypeConcessionHautiriere.Merlus, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLPel = new qTypeConcessionHautiriere(44,enumPrefix.IND,enumTypeConcessionHautiriere.Pelagique, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLDemAQM = new qTypeConcessionHautiriere(45,enumPrefix.DEM,enumTypeConcessionHautiriere.Poissons_demersaux_autre_que_merlu, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLThon = new qTypeConcessionHautiriere(46,enumPrefix.IND,enumTypeConcessionHautiriere.Thons, enumTypePecheHautiriere.Licence);

		typeconcessionService.create(phLCeph);
		typeconcessionService.create(phLAutres);
		typeconcessionService.create(phLCrab);
		typeconcessionService.create(phLCrv);
		typeconcessionService.create(phLLangRose);
		typeconcessionService.create(phLMerlu);
		typeconcessionService.create(phLPel);
		typeconcessionService.create(phLDemAQM);
		typeconcessionService.create(phLThon);

		qCategRessource qRCphLCeph = new qCategRessource(phLCeph, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphLAutres = new qCategRessource(phLAutres, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphLCrab = new qCategRessource(phLCrab, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphLCrv = new qCategRessource(phLCrv, enumSupport.Individuel,null, qEngins);
		qCategRessource qphLLangRose = new qCategRessource(phLLangRose, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphALangRose = new qCategRessource(phLMerlu, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphAMerlu = new qCategRessource(phLPel, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphAPel = new qCategRessource(phLDemAQM, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphADemAQM = new qCategRessource(phLThon, enumSupport.Individuel,null, qEngins);
		categService.create(qRCphLCeph);
		categService.create(qRCphLAutres);
		categService.create(qRCphLCrab);
		categService.create(qRCphLCrv);
		categService.create(qphLLangRose);
		categService.create(qRCLphALangRose);
		categService.create(qRCLphAMerlu);
		categService.create(qRCLphAPel);
		categService.create(qRCLphADemAQM);
		//  creer les categories de ressource 9 PH


		//  creer le consignataires

		qConsignataire qconsignataire1 = new qConsignataire("Jelal eddine");
		qConsignataire qconsignataire2 = new qConsignataire("Jelal eddine 3");
		qConsignataire qconsignataire3 = new qConsignataire("Jelal eddine 2 ");
		consignataireService.create(qconsignataire1);
		consignataireService.create(qconsignataire2);
		consignataireService.create(qconsignataire3);
		//creer les engins de peches


		// creer la concession


		SimpleDateFormat sdfmt1 = new SimpleDateFormat("dd/MM/yy");
		//   SimpleDateFormat sdfmt2= new SimpleDateFormat("dd-MMM-yyyy");
		Date  dateLicence=null,datedebut=null, dateFin=null;

		try {
			dateLicence= sdfmt1.parse("12/12/2016");
			datedebut= sdfmt1.parse("12/12/2016");
			dateFin= sdfmt1.parse("12/12/2016");
		} catch (ParseException e) {
			e.printStackTrace();
		}
		// artisanal de 1 à 5
		// COTIER DE 6 à 19
		// HAUTIRIERE de 20 à 46
		List<qCategRessource> qcatList1=new ArrayList<qCategRessource>();
		List<qCategRessource> qc=new ArrayList<qCategRessource>();
		qCategPK g1=new qCategPK(15);
		qCategPK g2=new qCategPK(17);
		qCategRessource q1=categService.findById(15);
		qCategRessource q11=categService.findById(17);

		qc.add(q1);
		qc.add(q11);

		// qConcessionPC.setCategoriesRessources(qcatList1);
		qConcession qConcessionPC=new qConcession("PC2016/0001",qconsignataire3,dateLicence,datedebut,dateFin,qc,null);


		System.out.println("id est :"+q1.getIdtypeConcession());
		qConcessionPC.setCategoriesRessources(qc);


		concessionService.create(qConcessionPC);

// c est une concession de type cotiere non pontee

		concessionService.create(qConcessionPC);
		// creer une licence bat last


		qTypeLic qtyplic1=new qTypeLic('A','A',"Affreté artisanal");
		qTypeLic qtyplic2=new qTypeLic('A','C',"Affreté collecte pêche artisanal");
		qTypeLic qtyplic3=new qTypeLic('A','D',"Affreté demersal(poisson+ ceph)");
		qTypeLic qtyplic4=new qTypeLic('A','E',"Affreté demersal(crust+ ceph)");
		qTypeLic qtyplic5=new qTypeLic('A','L',"Affreté Langouste");
		qTypeLic qtyplic6=new qTypeLic('A','M',"Affreté Merlu");
		qTypeLic qtyplic7=new qTypeLic('A','P',"Affreté Pelagique");
		qTypeLic qtyplic8=new qTypeLic('A','T',"Affreté thon");
		qTypeLic qtyplic9=new qTypeLic('A','B',"Affreté crabes");
		qTypeLic qtyplic10=new qTypeLic('A','Q',"Affreté coquillage");
		qTypeLic qtyplic11=new qTypeLic('A','R',"Affreté recherche");
		qTypeLic qtyplic12=new qTypeLic('A','S',"Affreté requin");
		qTypeLic qtyplic13=new qTypeLic('A','V',"Affreté crevettes");
		qTypeLic qtyplic14=new qTypeLic('A','1',"Affreté crevettes+langoustes");
		qTypeLic qtyplic15=new qTypeLic('A','F',"Affreté demersal+lang verte");


		qTypeLic qtyplic20=new qTypeLic('L','A',"Licence artisanal");
		qTypeLic qtyplic21=new qTypeLic('L','C',"Licence collecte peche artisanal");
		qTypeLic qtyplic22=new qTypeLic('L','D',"Licence dem poss+ceph");
		qTypeLic qtyplic23=new qTypeLic('L','L',"Licence langouste");
		qTypeLic qtyplic24=new qTypeLic('L','M',"Licence merlu");
		qTypeLic qtyplic25=new qTypeLic('L','P',"Licence pelagique");
		qTypeLic qtyplic26=new qTypeLic('L','T',"Licence thon");
		qTypeLic qtyplic27=new qTypeLic('L','V',"Licence crust sauf langouste");
		qTypeLic qtyplic28=new qTypeLic('L','B',"Licence crabes");
		qTypeLic qtyplic29=new qTypeLic('L','H',"Licence esp dem profond");
		qTypeLic qtyplic30=new qTypeLic('L','Q',"Licence coquillage");
		qTypeLic qtyplic31=new qTypeLic('L','R',"Licence recherche");
		qTypeLic qtyplic32=new qTypeLic('L','S',"Licence requin");
		qTypeLic qtyplic33=new qTypeLic('L','1',"Licence crevettes +langouste");


		qTypeLic qtyplic35=new qTypeLic('N','A',"National artisanal");
		qTypeLic qtyplic36=new qTypeLic('N','C',"National collecte peche artisanal");
		qTypeLic qtyplic37=new qTypeLic('N','D',"National dem poiss+ ceph");
		qTypeLic qtyplic38=new qTypeLic('N','E',"National dem cep+ crust");
		qTypeLic qtyplic39=new qTypeLic('N','L',"National langouste");
		qTypeLic qtyplic40=new qTypeLic('N','M',"National merlu");
		qTypeLic qtyplic41=new qTypeLic('N','P',"National pelagique");
		qTypeLic qtyplic42=new qTypeLic('N','T',"National thon");
		qTypeLic qtyplic43=new qTypeLic('N','B',"National crabes");
		qTypeLic qtyplic44=new qTypeLic('N','Q',"National coquillage");
		qTypeLic qtyplic45=new qTypeLic('N','R',"National recherche");
		qTypeLic qtyplic46=new qTypeLic('N','S',"National requin");
		qTypeLic qtyplic47=new qTypeLic('N','V',"National crevettes");
		qTypeLic qtyplic48=new qTypeLic('N','1',"National crevettes+langouste");

		qTypeLic qtyplic49=new qTypeLic('L','G',"Licence Esp dem autre que merlu");
		qTypeLic qtyplic50=new qTypeLic('L','E',"Licence Esp dem");
		qTypeLic qtyplic51=new qTypeLic('A','V',"AU");
		qTypeLic qtyplic52=new qTypeLic('L','I',"Licence Thons+Espadons");
		qTypeLic qtyplic53=new qTypeLic('N','N',"NN");
		qTypeLic qtyplic54=new qTypeLic('N','I',"NI");
		qTypeLic qtyplic55=new qTypeLic('N','U',"NU");
		qTypeLic qtyplic56=new qTypeLic('L','T',"LT");
		qTypeLic qtyplic57=new qTypeLic('X','P',"XP");
		qTypeLic qtyplic58=new qTypeLic('Z','Z',"INDET");
		qTypeLic qtyplic59=new qTypeLic('L','0',"Licence INDET");
		qTypeLic qtyplic60=new qTypeLic('N','0',"National");
		qTypeLic qtyplic61=new qTypeLic('A','0',"Affrete INDET");
		qTypeLic qtyplic62=new qTypeLic('A','H',"National ravitalleur pel");

		typelicService.create(qtyplic1);
		typelicService.create(qtyplic2);
		typelicService.create(qtyplic3);
		typelicService.create(qtyplic4);
		typelicService.create(qtyplic5);
		typelicService.create(qtyplic6);
		typelicService.create(qtyplic7);
		typelicService.create(qtyplic8);
		typelicService.create(qtyplic9);
		typelicService.create(qtyplic10);
		typelicService.create(qtyplic11);
		typelicService.create(qtyplic12);
		typelicService.create(qtyplic13);
		typelicService.create(qtyplic14);
		typelicService.create(qtyplic15);
		typelicService.create(qtyplic20);
		typelicService.create(qtyplic21);
		typelicService.create(qtyplic23);
		typelicService.create(qtyplic24);
		typelicService.create(qtyplic25);
		typelicService.create(qtyplic26);
		typelicService.create(qtyplic27);
		typelicService.create(qtyplic28);
		typelicService.create(qtyplic29);
		typelicService.create(qtyplic30);
		typelicService.create(qtyplic31);
		typelicService.create(qtyplic32);
		typelicService.create(qtyplic33);

		qZone qZone1=new qZone(1,"CEE 96 Crustacé sauf Langoust");
		qZone qZone2=new qZone(1,"CEE 96 Crustacé sauf Langoust");
		qZone qZone3=new qZone(2,"CEE 96 Pelagique (Chalut)");
		qZone qZone4=new qZone(3,"CEE 96 Langoust (Casier)");
		qZone qZone5=new qZone(4,"CEE 96 Thon (palangre,canne)");
		qZone qZone6=new qZone(5,"CEE 96 Thon (senne)");
		qZone qZone7=new qZone(6,"CEE 96 Thon(canne ) + appait(sne)");
		qZone qZone8=new qZone(7," CEE 96 Cephalopode (chalut)");
		qZone qZone9=new qZone(8," CEE 96 Thon(canne ) + appait(sne)");
		qZone qZone10=new qZone(9,"CEE 96 Cephalopode (chalut)");
		qZone qZone11=new qZone(10,"CEE 96 Espéce demersal - Merlu (Chalut)");
		qZone qZone12=new qZone(11,"CEE 96 Espéce demersal - Merlu (Autres)");
		qZone qZone13=new qZone(12,"RIM - Japon Thon + Espadon)");
		qZone qZone14=new qZone(13,"ZAP 1 (Petit Pelagique)");
		qZone qZone15=new qZone(14,"ZAP 2 (Thon)");
		qZone qZone16=new qZone(15,"ZAP 3 (RIM)");
		qZone qZone17=new qZone(16," ZAP 3 (CEE)");
		qZone qZone18=new qZone(17,"ZAP 4(Demersaux autre que le merlu)");
		qZone qZone19=new qZone(18,"ZAP 5 (Crabe prophond)");
		qZone qZone20=new qZone(19,"ZAP6 (Maerlu)");
		qZone qZone21=new qZone(20,"ZAP7 (Crevette Gamba)");
		qZone qZone22=new qZone(21,"ZAP8 (Demersaux)");
		qZone qZone23=new qZone(22,"ZAP9 (Langoust Rose)");
		qZone qZone24=new qZone(23,"ZAP 10 (Langostinos)");
		qZone qZone25=new qZone(24,"Artisanal");
		zoneService.create(qZone7);

		qNation qnation1=new qNation("Mauritanie");
		qNation qnation2=new qNation("France");
		qNation qnation3=new qNation("Espagne");
		qNation qnation4=new qNation("Hollande");
		nationService.create(qnation1);
		nationService.create(qnation2);
		nationService.create(qnation3);
		nationService.create(qnation4);


		qRegistreNavire qreg1=new qRegistreNavire(null,"RT56");
		registrenavireService.create(qreg1);

		//   SimpleDateFormat sdfmt2= new SimpleDateFormat("dd-MMM-yyyy");
		System.out.println("jhjg :");
	//	System.out.println(nav.getNumimm());
		Date  dateLicenceDebut=null, dateLicenceFin=null;

		try {
			dateLicenceDebut= sdfmt1.parse("12/12/2016");
			dateLicenceFin= sdfmt1.parse("10/05/2017");
		} catch (ParseException e) {
			e.printStackTrace();
		}
		// save one side with null value for other many side
		qLicence qlicencebatlast1=new qLicence(qtyplic20,qTypeEnc.MRT,qZone7,qnation3,null,qEngins,enumSupport.Individuel,qreg1,qconsignataire2,qConcessionPC,
				enumTypeBat.Congélateur_RTMA, dateLicenceDebut,dateLicenceFin,1983,23,"5G","23","12",12,123,23,"12","12.5M","34","AHMED VALL","ghgh","BATEAU N 1","TR2016","LIC20171","Nouadhibou","ER345","3ER",23);
		licenceService.create(qlicencebatlast1);
		qreg1.setQlicencedernier(qlicencebatlast1);
		registrenavireService.save(qreg1);




		// set for every element in many side a single already saved object on one side and save iterable result
		List<qCategRessource> qc1=new ArrayList<qCategRessource>();
		qCategRessource q2=categService.findById(15);
		qc.add(q2);

		System.out.println("id est :"+q2.getIdtypeConcession());
		qlicencebatlast1.setQcatressources(qc1);
		licenceService.create(qlicencebatlast1);
		//qlicencebatlastrepository.save(qlicencebatlast1);
		// q1.setQlicence(qlicencebatlast1);



		qLicence qlicencebatlast2=new qLicence(qtyplic20,qTypeEnc.MRT,qZone7,qnation3,null,qEngins,enumSupport.Individuel,qreg1,qconsignataire2,qConcessionPC,
				enumTypeBat.Congélateur_RTMA, dateLicenceDebut,dateLicenceFin,1983,23,"5G","23","12",12,123,23,"12","12.5M","34","AHMED VALL","ghgh","BATEAU N 1","TR2016","LIC20172","Nouadhibou","ER345","3ER",23);

		licenceService.create(qlicencebatlast2);
		List<qCategRessource> qc2=new ArrayList<qCategRessource>();
		qCategRessource q22=categService.findById(13);
		qCategRessource q3=categService.findById(17);
		qc2.add(q22);
		qc2.add(q3);
		qlicencebatlast2.setQcatressources(qc2);

		licenceService.create(qlicencebatlast2);
		//    Iterator<qCategRessource> crunchifyIterator = qc2.iterator();

		Iterator<qLicence> qlicencesIterator= licenceService.findAll().iterator();
		Integer i=0;
		while(qlicencesIterator.hasNext())
		{
			Integer sz=qlicencesIterator.next().getQcatressources().size();

			System.out.println(" nombre de categ de "+i+" EST :"+sz);
			i++;
		}
//        q2.setQlicence(qlicencebatlast2);
		// qcategressourcerepository.save(q2);
		// crer les modeles et les associer avec  les especes

		qModelJP qmodelPA=new qModelJP(enumPrefix.PA,null);
		qModelJP qmodelPC=new qModelJP(enumPrefix.PC,null);
		qModelJP qmodelJPCEPH=new qModelJP(enumPrefix.CEPH,null);
		qModelJP qmodelJPPE=new qModelJP(enumPrefix.PE,null);
		qModelJP qmodelJPCRUS=new qModelJP(enumPrefix.CRUS,null);
		qModelJP qmodelJPDEM=new qModelJP(enumPrefix.DEM,null);


		// creer les especes

		qEspece qespeceArts1=new qEspece("ESP1001","الفئة الاولى","premiere espece",1);
		qEspece qespeceArts2=new qEspece("ESP1002","الفئة الاولى","deuxieme espece",2);
		qEspece qespeceArts3=new qEspece("ESP1003","الفئة الاولى","troisieme espece",3);

		especeService.create(qespeceArts1);
		especeService.create(qespeceArts2);
		especeService.create(qespeceArts3);
		modeljpService.create(qmodelPA);
		modeljpService.create(qmodelPC);
		modeljpService.create(qmodelJPCEPH);
		modeljpService.create(qmodelJPPE);
		modeljpService.create(qmodelJPCRUS);
		modeljpService.create(qmodelJPDEM);

// les especes typees

		List<qEspeceTypee> esptypessCollection=new ArrayList<qEspeceTypee>();

		qEspeceTypee qespecetypee1=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts1,null);
		qEspeceTypee qespecetypee2=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts2,null);
		qEspeceTypee qespecetypee3=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts3,null);
		esptypessCollection.add(qespecetypee1);
		esptypessCollection.add(qespecetypee2);
		esptypessCollection.add(qespecetypee3);
		qmodelPC.setEspecestypees(esptypessCollection);
		modeljpService.create(qmodelPC);


		// creer les carnet et les pages automatiques


		// creation d'une fiche de debarquement



		// simulation de saisie d'un fiche de debarquement PC Non Pontee n de page = pc7
		SimpleDateFormat sdfmt = new SimpleDateFormat("dd/MM/yy");
		Date dateDepart=null, dateRetour=null;
		try {
			dateDepart = sdfmt1.parse("03/05/2016");
			dateRetour = sdfmt1.parse("04/06/2016");
		} catch (ParseException e) {
			e.printStackTrace();
		}
	//	qSeq seqActive=new qSeq("PC7","PC12",null);

//		seqService.create(seqActive);
		List<qEnginPecheDeb> qEnginsDeb = new ArrayList<qEnginPecheDeb>();
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Pots, false, 0));               //creer un document de debarquement le PC NON PONTEE
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Casier, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Filet_tremail, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Filet_maillant, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Turlutte, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Ligne, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Palangre, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Filet_encerclant_senne_tourn, false, 0));

		qCarnet qcarnet=new qCarnet(enumTypeDoc.Fiche_Debarquement,enumPrefix.PC,1L,50);

		qCarnet crn=carnetService.entrerDansLeSystem(qcarnet);
		carnetService.attribuerCarnetAuNavire(crn,qreg1,qConcessionPC,null);
	}
	@RequestMapping(value="/finList",method = RequestMethod.GET)
	public List<String> getFinList(@RequestParam String debut) {
		// creer les categories de ressource 5 PA  de 1 a 5
		System.out.println("numero de page  : "+debut);
		List<String> numsfin=new ArrayList<>();
		List<qPageCarnet> pq=pagecarnetService.getFinList(debut);
		for(qPageCarnet q:pq) numsfin.add(q.getNumeroPage().toString());
		return numsfin;

	}


	@Secured(value={"ROLE_admin"})
	@RequestMapping("/start1")
	public String list(Model model,HttpServletRequest httpServletRequest) {

		HttpSession httpSession=httpServletRequest.getSession();

		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		String username = auth.getName();
		List<String> roles=new ArrayList<>();
		for(GrantedAuthority ga:auth.getAuthorities()){
			roles.add(ga.getAuthority());
		}

		Map<String,Object> params=new HashMap<>();
		params.put("username",username);
		params.put("roles",roles);
	//	params.put("exp",ourLic.getLicAc().getLicenseText().getLicenseExpireDate().toString());
	//	ourLic.getLicAc().getValidationStatus().toString()
	//	params.put("validationStatus",true);
    //  params.put("Lic",ourLic.getLicAc());
		System.out.println("rest :");
	//	System.out.println(ourLic.getLicAc().getLicenseText().getLicenseExpireDate());

		model.addAttribute("infos",params);
		System.out.println(params);

		//-------------------------------------------------------------------------------------------
		// creer les categories de ressource 5 PA  de 1 a 5

		qTypeConcession paCeph = new qTypeConcessionArtisanal(1,enumPrefix.PA,enumTypeConcessionArtisanal.Cephalopode);
		qTypeConcession paCrust = new qTypeConcessionArtisanal(2,enumPrefix.PA,enumTypeConcessionArtisanal.Crustaces);
		qTypeConcession paDem = new qTypeConcessionArtisanal(3,enumPrefix.PA,enumTypeConcessionArtisanal.Poissons_demersaux);
		qTypeConcession paPel = new qTypeConcessionArtisanal(4,enumPrefix.PA,enumTypeConcessionArtisanal.Poissons_Pelagique);
		qTypeConcession paAlAut = new qTypeConcessionArtisanal(5,enumPrefix.PA,enumTypeConcessionArtisanal.Algues_et_autres_Mollusques);

		qEnginPeche qEng1 = new qEnginPeche(enumEngin.Casier, 70);
 		qEnginPeche qEng2 = new qEnginPeche(enumEngin.Chalut, 30);
		List<qEnginPeche> qEngins = new ArrayList<qEnginPeche>();
		qEngins.add(qEng1);
		qEngins.add(qEng2);

		enginsPecheService.create(qEng1);
		enginsPecheService.create(qEng2);

		typeconcessionService.create(paCeph);
		typeconcessionService.create(paCrust);
		typeconcessionService.create(paDem);
		typeconcessionService.create(paPel);
		typeconcessionService.create(paAlAut);

		qCategRessource qPACep = new qCategRessource(typeconcessionService.findById(1), enumSupport.Collectif,null, qEngins);

		qCategRessource qPACrust = new qCategRessource(paCrust, enumSupport.Collectif,null, qEngins);

		qCategRessource qPADem = new qCategRessource(paDem, enumSupport.Collectif,null, qEngins);

		qCategRessource qPAPel = new qCategRessource(paPel, enumSupport.Collectif,null, qEngins);

		qCategRessource qPAAlAut = new qCategRessource(paAlAut, enumSupport.Collectif,null, qEngins);


		categService.create(qPACep);
		categService.create(qPACrust);
		categService.create(qPADem);
		categService.create(qPAPel);
		categService.create(qPAAlAut);
		//-------------------------------------------------------------------------------------------
		// creer les categories de ressource 10 PC de 6 a 12
		qTypeConcessionCotiere pcNPCeph = new qTypeConcessionCotiere(6,enumPrefix.CEPH,enumTypeConcessionCotiere.Cepholopode, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPCrust = new qTypeConcessionCotiere(7,enumPrefix.CRUS,enumTypeConcessionCotiere.Crustaces, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPDem = new qTypeConcessionCotiere(8,enumPrefix.DEM,enumTypeConcessionCotiere.Poissons_demersaux, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPPelSenneursM26 = new qTypeConcessionCotiere(9,enumPrefix.PE,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg1, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPPelSenneurs26A40 = new qTypeConcessionCotiere(10,enumPrefix.PE,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg2, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPPelSenneurs40A60 = new qTypeConcessionCotiere(11,enumPrefix.PE,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg3, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcNPAutreMol = new qTypeConcessionCotiere(12,enumPrefix.IND,enumTypeConcessionCotiere.Autres_Mollusques, enumTypePechCotiere.NON_PONTEE);
		typeconcessionService.create(pcNPCeph);
		typeconcessionService.create(pcNPCrust);
		typeconcessionService.create(pcNPDem);
		typeconcessionService.create(pcNPPelSenneursM26);
		typeconcessionService.create(pcNPPelSenneurs26A40);
		typeconcessionService.create(pcNPPelSenneurs40A60);
		typeconcessionService.create(pcNPAutreMol);

		qCategRessource qPCNPCep = new qCategRessource(pcNPCeph, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPCrust = new qCategRessource(pcNPCrust, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPDem = new qCategRessource(pcNPDem, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPPel1 = new qCategRessource(pcNPPelSenneursM26, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPPel2 = new qCategRessource(pcNPPelSenneurs26A40, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPPel3 = new qCategRessource(pcNPPelSenneurs40A60, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCNPAlAut = new qCategRessource(pcNPAutreMol, enumSupport.Collectif,null, qEngins);


		categService.create(qPCNPCep);
		categService.create(qPCNPCrust);
		categService.create(qPCNPDem);
		categService.create(qPCNPPel1);
		categService.create(qPCNPPel2);
		categService.create(qPCNPPel3);
		categService.create(qPCNPAlAut);

		// peche cotier pontee 13 a 19

		qTypeConcessionCotiere pcPCeph = new qTypeConcessionCotiere(13,enumPrefix.PC,enumTypeConcessionCotiere.Cepholopode, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPCrust = new qTypeConcessionCotiere(14,enumPrefix.PC,enumTypeConcessionCotiere.Crustaces, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPDem = new qTypeConcessionCotiere(15,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_demersaux, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPPelSenneursM26 = new qTypeConcessionCotiere(16,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg1, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPPelSenneurs26A40 = new qTypeConcessionCotiere(17,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg2, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPPelSenneurs40A60 = new qTypeConcessionCotiere(18,enumPrefix.PC,enumTypeConcessionCotiere.Poissons_Pelagiques_Seg3, enumTypePechCotiere.NON_PONTEE);
		qTypeConcessionCotiere pcPAutreMol = new qTypeConcessionCotiere(19,enumPrefix.PC,enumTypeConcessionCotiere.Autres_Mollusques, enumTypePechCotiere.NON_PONTEE);

		typeconcessionService.create(pcPCeph);
		typeconcessionService.create(pcPCrust);
		typeconcessionService.create(pcPDem);
		typeconcessionService.create(pcPPelSenneursM26);
		typeconcessionService.create(pcPPelSenneurs26A40);
		typeconcessionService.create(pcPPelSenneurs40A60);
		typeconcessionService.create(pcPAutreMol);


		qCategRessource qPCPCep = new qCategRessource(pcPCeph, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPCrust = new qCategRessource(pcPCrust, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPDem = new qCategRessource(pcPDem, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPPel1 = new qCategRessource(pcPPelSenneursM26, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPPel2 = new qCategRessource(pcPPelSenneurs26A40, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPPel3 = new qCategRessource(pcPPelSenneurs40A60, enumSupport.Collectif,null, qEngins);
		qCategRessource qPCPAlAut = new qCategRessource(pcPAutreMol, enumSupport.Collectif,null, qEngins);

		categService.create(qPCPCep);
		categService.create(qPCPCrust);
		categService.create(qPCPDem);
		categService.create(qPCPPel1);
		categService.create(qPCPPel2);
		categService.create(qPCPPel3);
		categService.create(qPCPAlAut);

		// creer les categories de ressource 9 PH de 19 a  27
		qTypeConcessionHautiriere phNCeph = new qTypeConcessionHautiriere(20,enumPrefix.CEPH,enumTypeConcessionHautiriere.Cephalopode, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNAutres = new qTypeConcessionHautiriere(21,enumPrefix.IND,enumTypeConcessionHautiriere.Autres_Mollusques, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNCrab = new qTypeConcessionHautiriere(22,enumPrefix.IND,enumTypeConcessionHautiriere.Crabe_profond, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNCrv = new qTypeConcessionHautiriere(23,enumPrefix.IND,enumTypeConcessionHautiriere.Crevettes, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNLangRose = new qTypeConcessionHautiriere(24,enumPrefix.IND,enumTypeConcessionHautiriere.Langouste_rose, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNMerlu = new qTypeConcessionHautiriere(25,enumPrefix.IND,enumTypeConcessionHautiriere.Merlus, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNPel = new qTypeConcessionHautiriere(26,enumPrefix.PE,enumTypeConcessionHautiriere.Pelagique, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNDemAQM = new qTypeConcessionHautiriere(27,enumPrefix.DEM,enumTypeConcessionHautiriere.Poissons_demersaux_autre_que_merlu, enumTypePecheHautiriere.National);
		qTypeConcessionHautiriere phNThon = new qTypeConcessionHautiriere(28,enumPrefix.IND,enumTypeConcessionHautiriere.Thons, enumTypePecheHautiriere.National);

		typeconcessionService.create(phNCeph);
		typeconcessionService.create(phNAutres);
		typeconcessionService.create(phNCrab);
		typeconcessionService.create(phNCrv);
		typeconcessionService.create(phNLangRose);
		typeconcessionService.create(phNMerlu);
		typeconcessionService.create(phNPel);
		typeconcessionService.create(phNDemAQM);
		typeconcessionService.create(phNThon);


		qCategRessource qRCphNCeph = new qCategRessource(phNCeph, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNAutres = new qCategRessource(phNAutres, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNCrab = new qCategRessource(phNCrab, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNCrv = new qCategRessource(phNCrv, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNLangRose = new qCategRessource(phNMerlu, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNMerlu = new qCategRessource(phNPel, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNPel = new qCategRessource(phNDemAQM, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphNDemAQM = new qCategRessource(phNThon, enumSupport.Individuel,null, qEngins);
		categService.create(qRCphNCeph);
		categService.create(qRCphNAutres);
		categService.create(qRCphNCrab);
		categService.create(qRCphNCrv);
		categService.create(qRCphNLangRose);
		categService.create(qRCphNMerlu);
		categService.create(qRCphNPel);
		categService.create(qRCphNDemAQM);


		qTypeConcessionHautiriere phACeph = new qTypeConcessionHautiriere(29,enumPrefix.CEPH,enumTypeConcessionHautiriere.Cephalopode, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAAutres = new qTypeConcessionHautiriere(30,enumPrefix.IND,enumTypeConcessionHautiriere.Autres_Mollusques, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phACrab = new qTypeConcessionHautiriere(31,enumPrefix.IND,enumTypeConcessionHautiriere.Crabe_profond, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phACrv = new qTypeConcessionHautiriere(32,enumPrefix.IND,enumTypeConcessionHautiriere.Crevettes, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phALangRose = new qTypeConcessionHautiriere(33,enumPrefix.IND,enumTypeConcessionHautiriere.Langouste_rose, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAMerlu = new qTypeConcessionHautiriere(34,enumPrefix.IND,enumTypeConcessionHautiriere.Merlus, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAPel = new qTypeConcessionHautiriere(35,enumPrefix.IND,enumTypeConcessionHautiriere.Pelagique, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phADemAQM = new qTypeConcessionHautiriere(36,enumPrefix.DEM,enumTypeConcessionHautiriere.Poissons_demersaux_autre_que_merlu, enumTypePecheHautiriere.Affraite);
		qTypeConcessionHautiriere phAThon = new qTypeConcessionHautiriere(37,enumPrefix.IND,enumTypeConcessionHautiriere.Thons, enumTypePecheHautiriere.Affraite);

		typeconcessionService.create(phACeph);
		typeconcessionService.create(phAAutres);
		typeconcessionService.create(phACrab);
		typeconcessionService.create(phACrv);
		typeconcessionService.create(phALangRose);
		typeconcessionService.create(phAMerlu);
		typeconcessionService.create(phAPel);
		typeconcessionService.create(phADemAQM);
		typeconcessionService.create(phAThon);

		qCategRessource qRCphACeph = new qCategRessource(phACeph, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAAutres = new qCategRessource(phAAutres, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphACrab = new qCategRessource(phACrab, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphACrv = new qCategRessource(phACrv, enumSupport.Individuel,null, qEngins);
		qCategRessource qphALangRose = new qCategRessource(phALangRose, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAMerlu = new qCategRessource(phAMerlu, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAPel = new qCategRessource(phAPel, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphADemAQM = new qCategRessource(phADemAQM, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphAThon = new qCategRessource(phAThon, enumSupport.Individuel,null, qEngins);


		categService.create(qRCphACeph);
		categService.create(qRCphAAutres);
		categService.create(qRCphACrab);
		categService.create(qRCphACrv);
		categService.create(qphALangRose);
		categService.create(qRCphAMerlu);
		categService.create(qRCphAPel);
		categService.create(qRCphADemAQM);
		categService.create(qRCphAThon);

		qTypeConcessionHautiriere phLCeph = new qTypeConcessionHautiriere(38,enumPrefix.CEPH,enumTypeConcessionHautiriere.Cephalopode, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLAutres = new qTypeConcessionHautiriere(39,enumPrefix.IND,enumTypeConcessionHautiriere.Autres_Mollusques, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLCrab = new qTypeConcessionHautiriere(40,enumPrefix.IND,enumTypeConcessionHautiriere.Crabe_profond, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLCrv = new qTypeConcessionHautiriere(41,enumPrefix.IND,enumTypeConcessionHautiriere.Crevettes, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLLangRose = new qTypeConcessionHautiriere(42,enumPrefix.IND,enumTypeConcessionHautiriere.Langouste_rose, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLMerlu = new qTypeConcessionHautiriere(43,enumPrefix.IND,enumTypeConcessionHautiriere.Merlus, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLPel = new qTypeConcessionHautiriere(44,enumPrefix.IND,enumTypeConcessionHautiriere.Pelagique, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLDemAQM = new qTypeConcessionHautiriere(45,enumPrefix.DEM,enumTypeConcessionHautiriere.Poissons_demersaux_autre_que_merlu, enumTypePecheHautiriere.Licence);
		qTypeConcessionHautiriere phLThon = new qTypeConcessionHautiriere(46,enumPrefix.IND,enumTypeConcessionHautiriere.Thons, enumTypePecheHautiriere.Licence);

		typeconcessionService.create(phLCeph);
		typeconcessionService.create(phLAutres);
		typeconcessionService.create(phLCrab);
		typeconcessionService.create(phLCrv);
		typeconcessionService.create(phLLangRose);
		typeconcessionService.create(phLMerlu);
		typeconcessionService.create(phLPel);
		typeconcessionService.create(phLDemAQM);
		typeconcessionService.create(phLThon);

		qCategRessource qRCphLCeph = new qCategRessource(phLCeph, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphLAutres = new qCategRessource(phLAutres, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphLCrab = new qCategRessource(phLCrab, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCphLCrv = new qCategRessource(phLCrv, enumSupport.Individuel,null, qEngins);
		qCategRessource qphLLangRose = new qCategRessource(phLLangRose, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphALangRose = new qCategRessource(phLMerlu, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphAMerlu = new qCategRessource(phLPel, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphAPel = new qCategRessource(phLDemAQM, enumSupport.Individuel,null, qEngins);
		qCategRessource qRCLphADemAQM = new qCategRessource(phLThon, enumSupport.Individuel,null, qEngins);
		categService.create(qRCphLCeph);
		categService.create(qRCphLAutres);
		categService.create(qRCphLCrab);
		categService.create(qRCphLCrv);
		categService.create(qphLLangRose);
		categService.create(qRCLphALangRose);
		categService.create(qRCLphAMerlu);
		categService.create(qRCLphAPel);
		categService.create(qRCLphADemAQM);
		//  creer les categories de ressource 9 PH


		//  creer le consignataires

		qConsignataire qconsignataire1 = new qConsignataire("Jelal eddine");
		qConsignataire qconsignataire2 = new qConsignataire("Jelal eddine 3");
		qConsignataire qconsignataire3 = new qConsignataire("Jelal eddine 2 ");
		consignataireService.create(qconsignataire1);
		consignataireService.create(qconsignataire2);
		consignataireService.create(qconsignataire3);
		//creer les engins de peches


		// creer la concession


		SimpleDateFormat sdfmt1 = new SimpleDateFormat("dd/MM/yy");
		//   SimpleDateFormat sdfmt2= new SimpleDateFormat("dd-MMM-yyyy");
		Date  dateLicence=null,datedebut=null, dateFin=null;

		try {
			dateLicence= sdfmt1.parse("12/12/2016");
			datedebut= sdfmt1.parse("12/12/2016");
			dateFin= sdfmt1.parse("12/12/2016");
		} catch (ParseException e) {
			e.printStackTrace();
		}
		// artisanal de 1 à 5
		// COTIER DE 6 à 19
		// HAUTIRIERE de 20 à 46
		List<qCategRessource> qcatList1=new ArrayList<qCategRessource>();
		List<qCategRessource> qc=new ArrayList<qCategRessource>();
		qCategPK g1=new qCategPK(15);
		qCategPK g2=new qCategPK(17);
		qCategRessource q1=categService.findById(15);
		qCategRessource q11=categService.findById(17);

		qc.add(q1);
		qc.add(q11);

		// qConcessionPC.setCategoriesRessources(qcatList1);
		qConcession qConcessionPC=new qConcession("PC2016/0001",qconsignataire3,dateLicence,datedebut,dateFin,qc,null);


		System.out.println("id est :"+q1.getIdtypeConcession());
		qConcessionPC.setCategoriesRessources(qc);


		concessionService.create(qConcessionPC);

// c est une concession de type cotiere non pontee

		concessionService.create(qConcessionPC);
		// creer une licence bat last


		qTypeLic qtyplic1=new qTypeLic('A','A',"Affreté artisanal");
		qTypeLic qtyplic2=new qTypeLic('A','C',"Affreté collecte pêche artisanal");
		qTypeLic qtyplic3=new qTypeLic('A','D',"Affreté demersal(poisson+ ceph)");
		qTypeLic qtyplic4=new qTypeLic('A','E',"Affreté demersal(crust+ ceph)");
		qTypeLic qtyplic5=new qTypeLic('A','L',"Affreté Langouste");
		qTypeLic qtyplic6=new qTypeLic('A','M',"Affreté Merlu");
		qTypeLic qtyplic7=new qTypeLic('A','P',"Affreté Pelagique");
		qTypeLic qtyplic8=new qTypeLic('A','T',"Affreté thon");
		qTypeLic qtyplic9=new qTypeLic('A','B',"Affreté crabes");
		qTypeLic qtyplic10=new qTypeLic('A','Q',"Affreté coquillage");
		qTypeLic qtyplic11=new qTypeLic('A','R',"Affreté recherche");
		qTypeLic qtyplic12=new qTypeLic('A','S',"Affreté requin");
		qTypeLic qtyplic13=new qTypeLic('A','V',"Affreté crevettes");
		qTypeLic qtyplic14=new qTypeLic('A','1',"Affreté crevettes+langoustes");
		qTypeLic qtyplic15=new qTypeLic('A','F',"Affreté demersal+lang verte");


		qTypeLic qtyplic20=new qTypeLic('L','A',"Licence artisanal");
		qTypeLic qtyplic21=new qTypeLic('L','C',"Licence collecte peche artisanal");
		qTypeLic qtyplic22=new qTypeLic('L','D',"Licence dem poss+ceph");
		qTypeLic qtyplic23=new qTypeLic('L','L',"Licence langouste");
		qTypeLic qtyplic24=new qTypeLic('L','M',"Licence merlu");
		qTypeLic qtyplic25=new qTypeLic('L','P',"Licence pelagique");
		qTypeLic qtyplic26=new qTypeLic('L','T',"Licence thon");
		qTypeLic qtyplic27=new qTypeLic('L','V',"Licence crust sauf langouste");
		qTypeLic qtyplic28=new qTypeLic('L','B',"Licence crabes");
		qTypeLic qtyplic29=new qTypeLic('L','H',"Licence esp dem profond");
		qTypeLic qtyplic30=new qTypeLic('L','Q',"Licence coquillage");
		qTypeLic qtyplic31=new qTypeLic('L','R',"Licence recherche");
		qTypeLic qtyplic32=new qTypeLic('L','S',"Licence requin");
		qTypeLic qtyplic33=new qTypeLic('L','1',"Licence crevettes +langouste");


		qTypeLic qtyplic35=new qTypeLic('N','A',"National artisanal");
		qTypeLic qtyplic36=new qTypeLic('N','C',"National collecte peche artisanal");
		qTypeLic qtyplic37=new qTypeLic('N','D',"National dem poiss+ ceph");
		qTypeLic qtyplic38=new qTypeLic('N','E',"National dem cep+ crust");
		qTypeLic qtyplic39=new qTypeLic('N','L',"National langouste");
		qTypeLic qtyplic40=new qTypeLic('N','M',"National merlu");
		qTypeLic qtyplic41=new qTypeLic('N','P',"National pelagique");
		qTypeLic qtyplic42=new qTypeLic('N','T',"National thon");
		qTypeLic qtyplic43=new qTypeLic('N','B',"National crabes");
		qTypeLic qtyplic44=new qTypeLic('N','Q',"National coquillage");
		qTypeLic qtyplic45=new qTypeLic('N','R',"National recherche");
		qTypeLic qtyplic46=new qTypeLic('N','S',"National requin");
		qTypeLic qtyplic47=new qTypeLic('N','V',"National crevettes");
		qTypeLic qtyplic48=new qTypeLic('N','1',"National crevettes+langouste");

		qTypeLic qtyplic49=new qTypeLic('L','G',"Licence Esp dem autre que merlu");
		qTypeLic qtyplic50=new qTypeLic('L','E',"Licence Esp dem");
		qTypeLic qtyplic51=new qTypeLic('A','V',"AU");
		qTypeLic qtyplic52=new qTypeLic('L','I',"Licence Thons+Espadons");
		qTypeLic qtyplic53=new qTypeLic('N','N',"NN");
		qTypeLic qtyplic54=new qTypeLic('N','I',"NI");
		qTypeLic qtyplic55=new qTypeLic('N','U',"NU");
		qTypeLic qtyplic56=new qTypeLic('L','T',"LT");
		qTypeLic qtyplic57=new qTypeLic('X','P',"XP");
		qTypeLic qtyplic58=new qTypeLic('Z','Z',"INDET");
		qTypeLic qtyplic59=new qTypeLic('L','0',"Licence INDET");
		qTypeLic qtyplic60=new qTypeLic('N','0',"National");
		qTypeLic qtyplic61=new qTypeLic('A','0',"Affrete INDET");
		qTypeLic qtyplic62=new qTypeLic('A','H',"National ravitalleur pel");

		typelicService.create(qtyplic1);
		typelicService.create(qtyplic2);
		typelicService.create(qtyplic3);
		typelicService.create(qtyplic4);
		typelicService.create(qtyplic5);
		typelicService.create(qtyplic6);
		typelicService.create(qtyplic7);
		typelicService.create(qtyplic8);
		typelicService.create(qtyplic9);
		typelicService.create(qtyplic10);
		typelicService.create(qtyplic11);
		typelicService.create(qtyplic12);
		typelicService.create(qtyplic13);
		typelicService.create(qtyplic14);
		typelicService.create(qtyplic15);
		typelicService.create(qtyplic20);
		typelicService.create(qtyplic21);
		typelicService.create(qtyplic23);
		typelicService.create(qtyplic24);
		typelicService.create(qtyplic25);
		typelicService.create(qtyplic26);
		typelicService.create(qtyplic27);
		typelicService.create(qtyplic28);
		typelicService.create(qtyplic29);
		typelicService.create(qtyplic30);
		typelicService.create(qtyplic31);
		typelicService.create(qtyplic32);
		typelicService.create(qtyplic33);

		qZone qZone1=new qZone(1,"CEE 96 Crustacé sauf Langoust");
		qZone qZone2=new qZone(1,"CEE 96 Crustacé sauf Langoust");
		qZone qZone3=new qZone(2,"CEE 96 Pelagique (Chalut)");
		qZone qZone4=new qZone(3,"CEE 96 Langoust (Casier)");
		qZone qZone5=new qZone(4,"CEE 96 Thon (palangre,canne)");
		qZone qZone6=new qZone(5,"CEE 96 Thon (senne)");
		qZone qZone7=new qZone(6,"CEE 96 Thon(canne ) + appait(sne)");
		qZone qZone8=new qZone(7," CEE 96 Cephalopode (chalut)");
		qZone qZone9=new qZone(8," CEE 96 Thon(canne ) + appait(sne)");
		qZone qZone10=new qZone(9,"CEE 96 Cephalopode (chalut)");
		qZone qZone11=new qZone(10,"CEE 96 Espéce demersal - Merlu (Chalut)");
		qZone qZone12=new qZone(11,"CEE 96 Espéce demersal - Merlu (Autres)");
		qZone qZone13=new qZone(12,"RIM - Japon Thon + Espadon)");
		qZone qZone14=new qZone(13,"ZAP 1 (Petit Pelagique)");
		qZone qZone15=new qZone(14,"ZAP 2 (Thon)");
		qZone qZone16=new qZone(15,"ZAP 3 (RIM)");
		qZone qZone17=new qZone(16," ZAP 3 (CEE)");
		qZone qZone18=new qZone(17,"ZAP 4(Demersaux autre que le merlu)");
		qZone qZone19=new qZone(18,"ZAP 5 (Crabe prophond)");
		qZone qZone20=new qZone(19,"ZAP6 (Maerlu)");
		qZone qZone21=new qZone(20,"ZAP7 (Crevette Gamba)");
		qZone qZone22=new qZone(21,"ZAP8 (Demersaux)");
		qZone qZone23=new qZone(22,"ZAP9 (Langoust Rose)");
		qZone qZone24=new qZone(23,"ZAP 10 (Langostinos)");
		qZone qZone25=new qZone(24,"Artisanal");
		zoneService.create(qZone7);

		qNation qnation1=new qNation("Mauritanie");
		qNation qnation2=new qNation("France");
		qNation qnation3=new qNation("Espagne");
		qNation qnation4=new qNation("Hollande");
		nationService.create(qnation1);
		nationService.create(qnation2);
		nationService.create(qnation3);
		nationService.create(qnation4);


		qRegistreNavire qreg1=new qRegistreNavire(null,"RT56");

		qRegistreNavire nav=registrenavireService.create(qreg1);
		//   SimpleDateFormat sdfmt2= new SimpleDateFormat("dd-MMM-yyyy");
		System.out.println("jhjg :");
		System.out.println(nav.getNumimm());
		Date  dateLicenceDebut=null, dateLicenceFin=null;

		try {
			dateLicenceDebut= sdfmt1.parse("12/12/2016");
			dateLicenceFin= sdfmt1.parse("10/05/2017");
		} catch (ParseException e) {
			e.printStackTrace();
		}
		// save one side with null value for other many side
		qLicence qlicencebatlast1=new qLicence(qtyplic20,qTypeEnc.MRT,qZone7,qnation3,null,qEngins,enumSupport.Individuel,qreg1,qconsignataire2,qConcessionPC,
				enumTypeBat.Congélateur_RTMA, dateLicenceDebut,dateLicenceFin,1983,23,"5G","23","12",12,123,23,"12","12.5M","34","AHMED VALL","ghgh","BATEAU N 1","TR2016","LIC20171","Nouadhibou","ER345","3ER",23);
		licenceService.create(qlicencebatlast1);
		// set for every element in many side a single already saved object on one side and save iterable result
		List<qCategRessource> qc1=new ArrayList<qCategRessource>();
		qCategRessource q2=categService.findById(15);
		qc.add(q2);

		System.out.println("id est :"+q2.getIdtypeConcession());
		qlicencebatlast1.setQcatressources(qc1);
		licenceService.create(qlicencebatlast1);
		//qlicencebatlastrepository.save(qlicencebatlast1);
		// q1.setQlicence(qlicencebatlast1);



		qLicence qlicencebatlast2=new qLicence(qtyplic20,qTypeEnc.MRT,qZone7,qnation3,null,qEngins,enumSupport.Individuel,qreg1,qconsignataire2,qConcessionPC,
				enumTypeBat.Congélateur_RTMA, dateLicenceDebut,dateLicenceFin,1983,23,"5G","23","12",12,123,23,"12","12.5M","34","AHMED VALL","ghgh","BATEAU N 1","TR2016","LIC20172","Nouadhibou","ER345","3ER",23);

		licenceService.create(qlicencebatlast2);
		List<qCategRessource> qc2=new ArrayList<qCategRessource>();
		qCategRessource q22=categService.findById(13);
		qCategRessource q3=categService.findById(17);
		qc2.add(q22);
		qc2.add(q3);
		qlicencebatlast2.setQcatressources(qc2);

		licenceService.create(qlicencebatlast2);
		//    Iterator<qCategRessource> crunchifyIterator = qc2.iterator();

		Iterator<qLicence> qlicencesIterator= licenceService.findAll().iterator();
		Integer i=0;
		while(qlicencesIterator.hasNext())
		{
			Integer sz=qlicencesIterator.next().getQcatressources().size();

			System.out.println(" nombre de categ de "+i+" EST :"+sz);
			i++;
		}
//        q2.setQlicence(qlicencebatlast2);
		// qcategressourcerepository.save(q2);
		// crer les modeles et les associer avec  les especes

		qModelJP qmodelPA=new qModelJP(enumPrefix.PA,null);
		qModelJP qmodelPC=new qModelJP(enumPrefix.PC,null);
		qModelJP qmodelJPCEPH=new qModelJP(enumPrefix.CEPH,null);
		qModelJP qmodelJPPE=new qModelJP(enumPrefix.PE,null);
		qModelJP qmodelJPCRUS=new qModelJP(enumPrefix.CRUS,null);
		qModelJP qmodelJPDEM=new qModelJP(enumPrefix.DEM,null);


		// creer les especes

		qEspece qespeceArts1=new qEspece("ESP1001","الفئة الاولى","premiere espece",1);
		qEspece qespeceArts2=new qEspece("ESP1002","الفئة الاولى","deuxieme espece",2);
		qEspece qespeceArts3=new qEspece("ESP1003","الفئة الاولى","troisieme espece",3);

		especeService.create(qespeceArts1);
		especeService.create(qespeceArts2);
		especeService.create(qespeceArts3);
		modeljpService.create(qmodelPA);
		modeljpService.create(qmodelPC);
		modeljpService.create(qmodelJPCEPH);
		modeljpService.create(qmodelJPPE);
		modeljpService.create(qmodelJPCRUS);
		modeljpService.create(qmodelJPDEM);

// les especes typees

		List<qEspeceTypee> esptypessCollection=new ArrayList<qEspeceTypee>();

		qEspeceTypee qespecetypee1=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts1,null);
		qEspeceTypee qespecetypee2=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts2,null);
		qEspeceTypee qespecetypee3=new qEspeceTypee(enumEspType.CIBLEE,qespeceArts3,null);
		esptypessCollection.add(qespecetypee1);
		esptypessCollection.add(qespecetypee2);
		esptypessCollection.add(qespecetypee3);
		qmodelPC.setEspecestypees(esptypessCollection);
		modeljpService.create(qmodelPC);


		// creer les carnet et les pages automatiques


		// creation d'une fiche de debarquement



		// simulation de saisie d'un fiche de debarquement PC Non Pontee n de page = pc7
		SimpleDateFormat sdfmt = new SimpleDateFormat("dd/MM/yy");
		Date dateDepart=null, dateRetour=null;
		try {
			dateDepart = sdfmt1.parse("03/05/2016");
			dateRetour = sdfmt1.parse("04/06/2016");
		} catch (ParseException e) {
			e.printStackTrace();
		}
	//	qSeq seqActive=new qSeq("PC7","PC12",null);

	//	seqService.create(seqActive);
		List<qEnginPecheDeb> qEnginsDeb = new ArrayList<qEnginPecheDeb>();
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Pots, false, 0));               //creer un document de debarquement le PC NON PONTEE
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Casier, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Filet_tremail, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Filet_maillant, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Turlutte, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Ligne, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Palangre, false, 0));
		qEnginsDeb.add(new qEnginPecheDeb(enumEnginDeb.Filet_encerclant_senne_tourn, false, 0));

		qCarnet qcarnet=new qCarnet(enumTypeDoc.Fiche_Debarquement,enumPrefix.PC,1L,50);
		qCarnet crn=carnetService.entrerDansLeSystem(qcarnet);
		carnetService.attribuerCarnetAuNavire(crn,nav,qConcessionPC,null);
		return "index";
	}

	

}