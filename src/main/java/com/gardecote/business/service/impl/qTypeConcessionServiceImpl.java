/*
 * Created on 26 sept. 2016 ( Time 10:51:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.gardecote.business.service.impl;
import com.gardecote.entities.qCategRessource;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import com.gardecote.business.service.qTypeConcessionService;


/**
 * Implementation of ActivitebatService
 */
import com.gardecote.entities.qTypeConcession;
import com.gardecote.data.repository.jpa.qTypeConcessionRepository;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

@Service
@Transactional
public class qTypeConcessionServiceImpl implements qTypeConcessionService {

	@PersistenceContext
	private EntityManager em;
	@Autowired
	private qTypeConcessionRepository qTypeConcessionJpaRepository;

	
	@Override
	public qTypeConcession findById(Integer idcapt) {
		qTypeConcession qCaptures = qTypeConcessionJpaRepository.findOne(idcapt);
		return qCaptures;
	}

	@Override
	public List<qTypeConcession> findAll() {
		Iterable<qTypeConcession> entities = qTypeConcessionJpaRepository.findAll();
		List<qTypeConcession> beans = new ArrayList<qTypeConcession>();
		for(qTypeConcession qCapture1 : entities) {
			beans.add(qCapture1);
		}
		return beans;
	}

	@Override
	public qTypeConcession save(qTypeConcession qcapture) {
		return update(qcapture) ;
	}

	@Override
	public qTypeConcession create(qTypeConcession qcapture) {
		//qcaptureEntity = new qCategRessource();
		qTypeConcession qcaptureEntitySaved = qTypeConcessionJpaRepository.save(qcapture);
		return qcaptureEntitySaved ;
	}

	@Override
	public qTypeConcession update(qTypeConcession qcapture) {
		qTypeConcession qcaptureEntity = qTypeConcessionJpaRepository.findOne(qcapture.getQtypeconcessionpk());
	//	qTypeConcession qcaptureEntitySaved = qTypeConcessionJpaRepository.save(qcapture);
		    Session session = em.unwrap(Session.class);
		      if (qcaptureEntity == null) {
		      em.persist(qcapture);
		          return qcapture;
		     } else {
		       session.evict(qcaptureEntity);
				  System.out.println("kkkkkkkkkkk");
				  System.out.println(qcaptureEntity.getQtypeconcessionpk());
				  System.out.println(qcaptureEntity.getPrefixNum());
				  System.out.println(qcaptureEntity.getPrefix());
				  System.out.println(qcaptureEntity.getTypeDoc());
				  System.out.println("kkkkkkkkkkk");
				  System.out.println("mmmmmmmm");
				  System.out.println(qcapture.getQtypeconcessionpk());
				  System.out.println(qcapture.getPrefixNum());
				  System.out.println(qcapture.getPrefix());
				  System.out.println(qcapture.getTypeDoc());
				  System.out.println("mmmmmmmm");
		      return em.merge(qcapture);
		     }

		//return qcaptureEntitySaved;
	}
	public static Throwable getRootThrowable(Throwable t) {
		Throwable result = t;

		while (result.getCause() != null) {
			result = result.getCause();
		}

		return result;
	}

	@Override
	public void delete(Integer idcapt) {

			qTypeConcessionJpaRepository.delete(idcapt);

	}

    public List<qCategRessource> check(qTypeConcession conc) {
		return qTypeConcessionJpaRepository.checkTypeconcession(conc);
         }




	public qTypeConcessionRepository getqCapturesJpaRepository() {
		return qTypeConcessionJpaRepository;
	}

	public void setqCapturesJpaRepository(qTypeConcessionRepository qCapturesJpaRepository) {
		this.qTypeConcessionJpaRepository = qCapturesJpaRepository;
	}
}
